
#include <stdio.h>
#include <stdlib.h>
struct Node{
    int data;
    struct Node* next;
};

struct Graph{
    int numVertex;
    int **matrix;
    int *visited;
};

struct Queue{
    struct Node* front;
    struct Node* rear;
    int count;
};

struct Queue* initQueue(struct Queue* queue)
{
    queue = malloc(sizeof(struct Queue));
    queue->count = 0;
    queue->front = NULL;
    queue->rear = NULL;
    return queue;
}

int isEmpty(struct Queue* queue)
{
    if (queue->count == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

void enQueue(struct Queue *queue, int data)
{
    struct Node *newNode = malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if(isEmpty(queue) == 1)
    {
        queue->front = newNode;
    }
    else
    {
        queue->rear->next = newNode;
    }
    queue->rear = newNode;
    queue->count++;

}

int deQueue(struct Queue *queue)
{
    if(isEmpty(queue) == 1)
    {
        return 0;
    }
    else
    {
        struct Node* newPtr = malloc(sizeof(struct Node*));
        int re = 0;
        newPtr = queue->front;
        queue->front = queue->front->next;
        re = newPtr->data;
        queue->count--;
        free(newPtr);
        return re;
    }
}

int printQueue(struct Queue* queue)
{
    if(isEmpty(queue) == 1)
    {
        return 0;
    }
    struct Node* cur;
    cur = queue -> front;
    printf("queue: ");
    while(1)
    {

        printf("%d ", cur->data);

        if (cur == queue->rear )
        {
            printf("\n");
            break;
        }
        cur = cur->next;
    }
    return 0;

}

void BFS(struct Graph* graph, int vertex)
{
    printf("\nipsung\n");
    struct Queue* queue;
    queue = initQueue(queue);

    enQueue( queue, vertex);
    graph->visited[vertex] = 1;
    printQueue(queue);
    printf("%d visited \n", vertex);

    while(!isEmpty(queue))
    {
        vertex = deQueue(queue);
        printQueue(queue);
        for(int i = 0 ; i < graph->numVertex ; i++ )
        {
            if(graph->matrix[vertex][i] == 1 && !(graph->visited[i]))
            {
                graph->visited[i] = 1;
                enQueue(queue, i);
                printQueue(queue);
                printf("%d visited \n", i);
            }
        }
    }
}

struct Graph* initGraph(struct Graph* graph, int numVertex)
{
    graph = malloc(sizeof(struct Graph));
    graph->numVertex = numVertex;
    graph->matrix = malloc(sizeof(int*)*numVertex);
    graph->visited = malloc(sizeof(int)*numVertex);
    for(int i = 0 ; i < numVertex ; i++)
    {
        graph->matrix[i] = malloc(sizeof(int)*numVertex);
        graph->visited[i] = 0;
    }
    for(int i = 0 ; i<numVertex ; i++)
    {
        for(int j = 0 ; j<numVertex ; j++ )
            {
                graph->matrix[i][j] = 0;
            }
    }
    return graph;
}

void addEdge(struct Graph* graph, int start, int end)
{
    graph->matrix[start][end] = 1;
    graph->matrix[end][start] = 1;
}

void printGraph(struct Graph* graph)
{
    for(int i = 0 ; i < graph->numVertex ; i++)
    {
        for(int j = 0 ; j < graph->numVertex ; j++)
        {
            printf("%d ",graph->matrix[i][j]);
        }
        printf("\n");
    }
}

void DFS(struct Graph* graph, int vertex)
{
    graph-> visited[vertex] = 1;
    printf("\nvertex %d is visited\n", vertex);

    for(int i = 0 ; i<graph->numVertex ; i++)
    {
        if(graph->matrix[vertex][i] == 1 && graph->visited[i]==0)
            {
                DFS(graph, i);
            }
    }
}

int main()
{
    struct Graph *graph;
    graph = initGraph(graph, 8);

    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 3, 7);
    addEdge(graph, 4, 7);
    addEdge(graph, 2, 5);
    addEdge(graph, 2, 6);
    addEdge(graph, 6, 7);
    addEdge(graph, 5, 7);

    printGraph(graph);
    BFS(graph, 1);

    for(int i = 0 ; i < graph->numVertex ; i++)
    {
        graph->visited[i] = 0;
    }

    DFS(graph, 0);
    free(graph->visited);
    for(int i = 0  ; i < graph->numVertex ; i++)
    {
        free(graph->matrix[i]);
    }
    free(graph->matrix);
    free(graph->numVertex);
    free(graph);
    return 0;
}
